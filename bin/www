#!/usr/bin/env node
"use strict";

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('cp476t:server');
let http = require('http');
let https = require('https');
let superagent = require('superagent');
let User = require("../models/User");
let Message = require("../models/Message");


/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	let addr = server.address();
	let bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

// Server tracking usernames and socket ids
let usernames = {};
let userIds = {};

// SocketIO
io.on('connection', async (socket) => {
	// Server notification when a client connects to Socket.IO
	console.log("Server: user connected");

	// User joins: updates dictionaries of usernames and emits to all users' online user lists
	socket.on("join", (username) => {
		for (let username in usernames) {
			socket.emit("join", username);
		}
		usernames[username] = socket.id;
		userIds[socket.id] = username;
		socket.emit("join", username);
		socket.broadcast.emit("join", username);
	});

	// User disconnects: deletes value of username from dictionary and triggers line removal of user
	socket.on('disconnect', async () => {
		let username = userIds[socket.id];
		delete userIds[socket.id];
		delete usernames[username];
		await socket.broadcast.emit("updateUserList", username);
		console.log("Server: " + username + " disconnected");
	});

	// initial sending of messages from database
	for await (let message of Message.find()) {
		socket.emit("loadChatroom", message);
	}	

	// Sending message: saves to DB and signals other sockets of new message
	socket.on('chat', async (msg, username, time) => {
		let user = await User.find({username: username}).lean();
		let message = new Message({
			message: msg,
			username: username,
			userId: user[0]._id,
			time: time
		});
		// Saves message (validation already checked)
		await message.save((err, output) => {
			if (err) {
				console.log("Message by " + username + " not saved: " + err.message);
			} else {
				console.log("Message by " + username + " saved: " + output.message);
			}
		});
		// Emiting to other clients using chatroom
		socket.broadcast.emit("loadChatroom", message);
	});

	// Use of OpenWeatherMap weather API and Finnhub stock price API
	socket.on("command", async (message) => {
		// Parse commands into weather or stock + weather/stock location
		let command = message.split(" ");

		// Weather request
		if (command.length > 1) {
			if (command[0] === "/weather") {
				try {
					// API request to OpenWeatherMap
					await http.get('http://api.openweathermap.org/data/2.5/weather?units=metric&appid=cf5f563744765ed1790a74d1702a36fd&q=' + command[1], (resp) => {
						let data = '';
						resp.on('data', (chunk) => {
							data += chunk;
						});
						resp.on('end', () => {
							try {
								// Setting output city to sentence case
								let city =  command[1].split(",")[0];
								city = city.toLowerCase();
								city = city.charAt(0).toUpperCase() + city.slice(1);

								// Emitting city temperature information to client
								socket.emit("command", city + "'s temperature is: " + JSON.parse(data).main.temp) + " degrees celsius";
							} catch (err) {
								console.log("Server weather emittance error: " + err.message + " from user: " + socket.id);
							}
						});
					});
				} catch (err) {
					console.log("Server weather request error: " + err.message + " from user: " + socket.id);
				}

			// Stock price request
			} else if (command[0] === "/stock") {
				try {
					// API request to Finnhub.IO
					await https.get('https://finnhub.io/api/v1/quote?token=bqjlppvrh5r9t8ht9r60&symbol=' + command[1].toUpperCase(), (resp) => {
						let data = '';
						resp.on('data', (chunk) => {
							data += chunk;
						});
						resp.on('end', () => {
							try {
								// Emitting stock price information to client
								socket.emit("command", command[1].toUpperCase() + "'s current price is: $" + JSON.parse(data).o + " USD");
							} catch (err) {
								console.log("Server stock emittance error: " + err.message + " from user: " + socket.id);
							}
						});
					});
				} catch (err) {
					console.log("Server stock request error: " + err.message + " from user: " + socket.id);
				}
			}
		}
	});
});