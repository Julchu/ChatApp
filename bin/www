#!/usr/bin/env node
"use strict";

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('cp476t:server');
let http = require('http');
let User = require("../models/User");
let Message = require("../models/Message");


/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	let bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	let addr = server.address();
	let bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

// SocketIO
io.on('connection', async (socket) => {
	console.log('Server: user connected');

	socket.on('disconnect', function () {
		console.log('Server: User disconnected');
	});

	// initial sending of messages from database
	for await (let message of Message.find()) {
		socket.emit("loadChatroom", message);
	}	

	// Sending message: saves to DB and signals other sockets of new message
	socket.on('chat', async (msg, username, time) => {
		let user = await User.find({username: username}).lean();
		let message = new Message({
			message: msg,
			username: username,
			userId: user[0]._id,
			time: time
		});
		// Saves message (validation already checked)
		await message.save((err, output) => {
			if (err) {
				console.log("Message not saved: " + err.message);
			} else {
				console.log("Message saved: " + output.message);
			}
		});
		// Emiting to other clients using chatroom
		socket.broadcast.emit("loadChatroom", message);
	});
});